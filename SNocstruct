import os.path
import sys
from colors import *
from builder import *

env = prepare_env(ARGUMENTS, ARGLIST)

env['scons'] = Environment(
    ARGUMENTS = env['ARGUMENTS'],
    ARGLIST = env['ARGLIST'],
    TESTNORUN = env['TESTNORUN'],
    BUILDERS = {'Test' :  Builder(action = builder_unit_test)},
    TOOLS  = env['TOOLS'],    
    TARGET_ARCH  = env['PLATFORM'],
    MSVC_VERSION = env['MSVC_VERSION'],
    LIBPATH = env['LIBPATH'],
    LIBS = env['LIBS'],
    LINKFLAGS = env['LINKFLAGS'],
    CPPPATH = env['CPPPATH'],
    CPPDEFINES = env['CPPDEFINES'],
    ENV = os.environ
)

for path in env['LD_LIBRARY_PATH']:
    env['scons'].AppendENVPath('LD_LIBRARY_PATH', path)
    env['scons'].AppendENVPath('PATH', path)

verbosity =  int(env['VERBOSE'] or 'verbose=1' in sys.argv)
if verbosity == 0:
    env['scons']['CCCOMSTR'] = GREEN+"Compiling $SOURCES"+NOCOLOR
    env['scons']['CXXCOMSTR'] = GREEN+"Compiling $SOURCES"+NOCOLOR
    env['scons']['LINKCOMSTR'] = GREEN+"Linking $TARGET"+NOCOLOR
    env['scons']['ARCOMSTR'] = GREEN+"Archieving $TARGET"+NOCOLOR
    env['scons']['RANLIBCOMSTR'] = GREEN+"Indexing $TARGET"+NOCOLOR
    env['scons']['SHCCCOMSTR'] = GREEN+"Compiling shared object $TARGET"+NOCOLOR
    env['scons']['SHCXXCOMSTR'] = GREEN+"Compiling shared object $TARGET"+NOCOLOR
elif verbosity == 1:
    env['scons']['CCCOMSTR'] = GREEN+"Compiling $CC -c $CCFLAGS $CPPFLAGS $CPPPATH $SOURCES  -o $TARGET"+NOCOLOR
    env['scons']['CXXCOMSTR'] = GREEN+"Compiling $CC -c $CCFLAGS $CPPFLAGS $CPPPATH $SOURCES -o $TARGET"+NOCOLOR
    env['scons']['LINKCOMSTR'] = GREEN+"Linking $LINK $TARGET $LINKFLAGS $LIBPATH $LIBS"+NOCOLOR
    env['scons']['ARCOMSTR'] = GREEN+"Archieving $TARGET $LINKFLAGS $LIBPATH $LIBS"+NOCOLOR
    env['scons']['RANLIBCOMSTR'] = GREEN+"Indexing $TARGET $LINKFLAGS $LIBPATH $LIBS"+NOCOLOR
    env['scons']['SHCCCOMSTR'] = GREEN+"Compiling shared object $TARGET $LINKFLAGS"+NOCOLOR
    env['scons']['SHCXXCOMSTR'] = GREEN+"Compiling shared object $TARGET $LINKFLAGS"+NOCOLOR
else:
    Progress(GREEN+'Evaluating $TARGET\n'+NOCOLOR)

        
if env.__contains__('CCFLAGS') and env['CCFLAGS'] != None:
    env['scons'].Replace(CCFLAGS=env['CCFLAGS'])
if env.__contains__('CC') and env['CC'] != None:
    env['scons'].Replace(CC=env['CC'])
if env.__contains__('CXX') and env['CXX'] != None:
    env['scons'].Replace(CXX=env['CXX'])
if env.__contains__('CPPFLAGS') and env['CPPFLAGS'] != None:
    env['scons'].Replace(CPPFLAGS=env['CPPFLAGS'])
if env.__contains__('LINK') and env['LINK'] != None:
    env['scons'].Replace(LINK=env['LINK'])
if env.__contains__('AR') and env['AR'] != None:
    env['scons'].Replace(AR=env['AR'])
if env.__contains__('RANLIB') and env['RANLIB'] != None:
    env['scons'].Replace(RANLIB=env['RANLIB'])


env['scons'].AppendENVPath('LD_LIBRARY_PATH', env['INSTALL_LIB_PATH'])
env['scons'].AppendENVPath('PATH', env['INSTALL_LIB_PATH'])
env['scons'].AppendENVPath('PKG_CONFIG_PATH', os.path.join(env['INSTALL_LIB_PATH'],'pkgconfig'))
                
# Progress('Evaluating $TARGET\n')
env['scons'].Decider( 'MD5-timestamp' )          # For speed, use timestamps for change, followed by MD5

#--------------------------------------
#           SOLUTION Builders
#--------------------------------------
preparePaths(env)

#start main build
if verbosity > 1:
    print(env['SNOCSCRIPT_PATH'])
# Export this environment for use by the SNocscript files
Export( 'env' )
SConscript( env['SNOCSCRIPT'] )

#Include crossproject dependencies
dictLaunchedDependencies = {}
if env.get('CROSSPROJECT_DEPENDENCIES')!=None:
    foundNewDependency = 1
    while foundNewDependency == 1:
        foundNewDependency = 0
        for depFullPath in env['CROSSPROJECT_DEPENDENCIES']:
            if depFullPath not in dictLaunchedDependencies:
                foundNewDependency = 1
                env['SNOCSCRIPT'] = os.path.join(depFullPath,'SNocscript.py')
                env['SNOCSCRIPT_PATH'] = os.path.abspath(os.path.dirname(env['SNOCSCRIPT']))
                preparePaths(env)
                #start building dependency
                
                if env['BUILD_ALL'] == '1':
                    if verbosity > 1:
                        print(env['SNOCSCRIPT_PATH'])
                    SConscript(env['SNOCSCRIPT'])
                dictLaunchedDependencies[depFullPath] = 1
                break

#--------------------------------------
#           Setting scons require()
#--------------------------------------
if env['BUILD_ALL'] == '1':
    for prog in env['APP_DEPENDENCIES']:
        for dep in env['APP_DEPENDENCIES'][prog]:
            # print prog+" depending on "+dep
            if env['APP_BUILD'].__contains__(prog) and env['APP_BUILD'].__contains__(dep):
                Depends(env['APP_BUILD'][prog], env['APP_BUILD'][dep])

env['INSTALL_ALIASES'].append( env['TEST_ALIASES'] )

Alias('test', env['TEST_ALIASES'])#run when test command provided in command line
Alias('install', env['INSTALL_ALIASES'])#run when install command provided in command line
